#!/usr/bin/env python
import shutil
import sys
import os
import subprocess
import logging
import argparse

sys.path.append(os.path.join(os.path.dirname(__file__), "..", "lib"))

from doctor.config import Config # type: ignore
from doctor.test_status import TestStatus # type: ignore
from doctor.outputter import Output # type: ignore

logger = logging.getLogger(__name__)

#------------------------------- main functions -------------------------------

def main():
    args, arg_parser = parse_args()

    if args.help:
        arg_parser.print_help()
        sys.exit(0)

    init_logger(args)

    logger.debug(f"sys.argv: {sys.argv}")

    config = Config()
    config.init()

    logger.info(section_str("test start"))

    try:
        test_init()
        test_env()
        test_yadm_status()
        test_files()
    except Exception as e:
        logger.error(f"test failed: {e}")
        logger.error(section_str("test exit"))
        sys.exit(1)
    logger.info(section_str("test end"))


#------------------------------- init functions -------------------------------

def parse_args() -> tuple[argparse.Namespace, argparse.ArgumentParser]:
    """parse argument

    Returns:
        argparse.Namespace: argument
    """
    arg_parser = argparse.ArgumentParser(description="dotfiles doctor")
    arg_parser.add_argument("-d", "--debug", action="store_true", help="debug mode")
    arg_parser.add_argument("-h", "--help", action="store_true", help="help")
    args = arg_parser.parse_args()

    return args, arg_parser


def init_logger(args):
    """initialize logger

    Args:
        args (argparse.Namespace): argument
    """
    # console handler
    console_handler = logging.StreamHandler()
    if args.debug:
        console_handler.setLevel(logging.DEBUG)
    else:
        console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
    logger.addHandler(console_handler)

    # file handler
    file_handler = logging.FileHandler(os.path.join(os.path.expanduser("~"), ".cache", "dotfiles", "doctor", "result.log"))
    if args.debug:
        file_handler.setLevel(logging.DEBUG)
    else:
        file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
    logger.addHandler(file_handler)

#------------------------------- test groups -------------------------------

def test_init(config: Config):
    if not os.path.exists(config.get_result_dir()):
        os.makedirs(config.get_result_dir())
    if os.path.isdir(config.get_result_dir()):
        if os.access(config.get_result_dir(), os.W_OK | os.X_OK):
            shutil.rmtree(config.get_result_dir())
        else:
            raise ValueError(f"result directory is not writable: {config.get_result_dir()}")
    else:
        raise ValueError(f"result directory is not directory: {config.get_result_dir()}")

def test_current_env():
    # test:current_env 現在のbashの環境変数をファイルに保存
    echo_info(test_number, "現在のbashの環境変数をファイルに保存")
    echo_env_file(test_number, os.environ, RESULT_ENV_FILE_BASH)
    echo_info(test_number, "現在のzshの環境変数をファイルに保存")
    echo_env_file(test_number, subprocess.check_output(["zsh", "-ic", "env"]).decode(), RESULT_ENV_FILE_ZSH)

def test_env():
    test_current_env()

def test_yadm_status():
    pass

def test_files():
    test_config_directory()
    test_local_bin_directory()
    test_home_directory()

#------------------------------- test functions -------------------------------





def section_str(section_name: str, split_char: str = "-") -> str:
    return f"##{split_char * 50} {section_name} {split_char * 50}##"

#------------------------------- main -------------------------------


if __name__ == "__main__":
    main()
